AWSTemplateFormatVersion: '2010-09-09'
Description: Scheduled Scale-in of services
Parameters:
  ClusterName:
    Type: String
    Description: ClusterName

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ClusterName}-scheduled-scale-in
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [lambda.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
      - PolicyName: S3Policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 's3:PutObject'
                - 'S3:DeleteObject'
                - 'ecs:*'
              Resource: "*"

  LambdaFn:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      FunctionName: !Sub ${ClusterName}-lambda-scheduled-scalein
      Description: Scheduled Scale in for ECS Services
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
                    import boto3
                    cluster_name="${ClusterName}"
                    client = boto3.client('ecs')

                    def lambda_handler(event, context):
                        response = client.list_services(
                            cluster=cluster_name
                        )
                        for service in response['serviceArns']:
                            service_name = service.split('/')[-1]
                            print "Scaling Down: " + service_name
                            client.update_service(
                                service=service_name,
                                desiredCount=1,
                                cluster=cluster_name
                            )
                        return 'Please check the cluster to confirm'

      Timeout: 300
      Runtime: python2.7

  LambdaAutoscalingTrigger:
    Type: "AWS::Events::Rule"
    DependsOn: LambdaFn
    Properties:
      Description: Trigger 10 pm Singapore time everyday
      Name: !Sub ${ClusterName}-autoscaling-Trigger
      ScheduleExpression: cron(0 13 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt LambdaFn.Arn
          Id: !Sub ${ClusterName}-lambda_autoscaling_function

  LambdaAccesstokenInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LambdaFn
      Principal: events.amazonaws.com  
      SourceArn: !GetAtt LambdaAutoscalingTrigger.Arn

Outputs:
  LambdaFn:
    Description: LambdaFn for scheduled scale-in
    Value: !GetAtt LambdaFn.Arn
    Export:
      Name: !Sub ${ClusterName}-sheduled-scalin-LambdaFnArn
