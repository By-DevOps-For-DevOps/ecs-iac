Description: >
    This template deploys an ECS cluster to the provided VPC and subnets
    using an Auto Scaling Group

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    InstanceType:
        Description: Which instance type should we use to build the ECS cluster?
        Type: String
        Default: t2.micro

    InstanceDockerVolume:
        Description: Addition volume size required for docker storage
        Type: Number
        Default: 0

    ClusterSize:
        Description: How many ECS hosts do you want to initially deploy?
        Type: Number
        Default: 2

    ClusterMaxSize:
        Description: Maximum number of instances allowed in Autoscaling group?
        Type: Number
        Default: 10

    KeyName:
        Type: AWS::EC2::KeyPair::KeyName
        Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.

    IncludeEFS:
        Description: Include EFS or not? Must be either true or false.
        Type: String
        Default: false

Conditions:
    IsNeedVolume: !Not [!Equals [!Ref InstanceDockerVolume, 0]]
    IsEFSIncluded: !Equals [ !Ref IncludeEFS, true ]

Mappings:

    # These are the latest ECS optimized AMIs as of March 2017:
    #
    #   AMI:          2017.09.e
    #   ECS agent:    1.16.1
    #   Docker:       17.06.2-ce
    #   ecs-init:     1.16.1-1
    #
    # You can find the latest available on this page of our documentation:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    # (note the AMI identifier is region specific)

    AWSRegionToAMI:
        us-east-2:
            AMIID: ami-901338f5
        us-east-1:
            AMIID: ami-13401669
        us-west-2:
            AMIID: ami-9a02a9e2
        us-west-1:
            AMIID: ami-b3adacd3
        eu-west-3:
            AMIID: ami-bd10a7c0
        eu-west-2:
            AMIID: ami-acd5cdc8
        eu-west-1:
            AMIID: ami-7827b301
        eu-central-1:
            AMIID: ami-b378e8dc
        ap-northeast-2:
            AMIID: ami-d6f454b8
        ap-northeast-1:
            AMIID: ami-af46dbc9
        ap-southeast-2:
            AMIID: ami-b88e7cda
        ap-southeast-1:
            AMIID: ami-fec3b482
        ca-central-1:
            AMIID: ami-e8cb4e8c
        ap-south-1:
            AMIID: ami-c80b5fa7
        sa-east-1:
            AMIID: ami-ca95d6a6

Resources:
    ECSCluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Ref EnvironmentName

    ECSAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
                - Fn::ImportValue: !Sub "${EnvironmentName}-PrivateSubnet1"
                - Fn::ImportValue: !Sub "${EnvironmentName}-PrivateSubnet2"
            LaunchConfigurationName: !Ref ECSLaunchConfiguration
            MinSize: !Ref ClusterSize
            MaxSize: !Ref ClusterMaxSize
            DesiredCapacity: !Ref ClusterSize
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} ECS host
                  PropagateAtLaunch: true
        CreationPolicy:
            ResourceSignal:
                Timeout: PT15M
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MinInstancesInService: 1
                MaxBatchSize: 1
                PauseTime: PT15M
                WaitOnResourceSignals: true
                SuspendProcesses:
                    - ScheduledActions

    ECSLaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            ImageId:  !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMIID]
            InstanceType: !Ref InstanceType
            KeyName: !Ref 'KeyName'
            BlockDeviceMappings:
                - !If
                    - IsNeedVolume
                    - DeviceName: "/dev/xvdcz"
                      Ebs:
                        VolumeSize: !Ref InstanceDockerVolume
                        VolumeType: 'gp2'
                    - !Ref AWS::NoValue
            SecurityGroups:
                - Fn::ImportValue: !Sub "${EnvironmentName}-ECSHostSecurityGroup"
            IamInstanceProfile: !Ref ECSInstanceProfile
            UserData:
                Fn::Base64:
                    !If
                        - IsEFSIncluded
                        - Fn::Sub:
                            - |
                                #!/bin/bash
                                yum update -y
                                yum install -y aws-cfn-bootstrap python34
                                /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
                                /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup
                                echo ECS_AVAILABLE_LOGGING_DRIVERS='["json-file","syslog","gelf","awslogs"]' >> /etc/ecs/ecs.config
                                curl -O https://bootstrap.pypa.io/get-pip.py
                                python3 /get-pip.py
                                /usr/local/bin/pip install awscli
                                (crontab -l 2>/dev/null; echo "*/5 * * * * /usr/local/bin/aws cloudwatch put-metric-data \
                                --metric-name LVMUsage \
                                --namespace DockerVolume \
                                --unit Percent --value \$(/sbin/lvs  --rows | grep Data | awk '{print \$2}') \
                                --dimensions InstanceId=$(curl  http://169.254.169.254/latest/meta-data/instance-id) \
                                --region ${AWS::Region}") | crontab -
                                /usr/local/bin/aws cloudwatch put-metric-alarm \
                                --alarm-name "Diskspace-$(curl  http://169.254.169.254/latest/meta-data/instance-id)" \
                                --alarm-description "The Diskspace utilization alarm for instance in ECS Cluster" \
                                --namespace "DockerVolume" \
                                --metric-name LVMUsage --statistic Average \
                                --period 60 --evaluation-periods 3 --threshold 50 \
                                --comparison-operator GreaterThanOrEqualToThreshold \
                                --dimensions Name=InstanceId,Value=$(curl  http://169.254.169.254/latest/meta-data/instance-id) --region ${AWS::Region}
                                #EFS
                                yum install -y jq nfs-utils
                                EC2_AVAIL_ZONE="$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)"
                                DIR_TGT="/mnt/efs"
                                mkdir "$DIR_TGT"
                                DIR_SRC="$EC2_AVAIL_ZONE.${EfsFileSystemId}.efs.${AWS::Region}.amazonaws.com"
                                mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,soft,timeo=600,retrans=2 "$DIR_SRC:/" "$DIR_TGT"
                                chown ec2-user:ec2-user $DIR_TGT
                                cp -p "/etc/fstab" "/etc/fstab.back-$(date +%F)"
                                echo -e "$DIR_SRC:/ \t\t $DIR_TGT \t\t nfs \t\t nfsvers=4.1,rsize=1048576,wsize=1048576,soft,timeo=600,retrans=2 \t\t 0 \t\t 0" | tee -a /etc/fstab
                                docker stop ecs-agent
                                /etc/init.d/docker restart
                                docker start ecs-agent
                            - EfsFileSystemId:
                                Fn::ImportValue:
                                    !Sub "${EnvironmentName}-FileSystemID"
                        - !Sub |
                            #!/bin/bash
                            yum update -y
                            yum install -y aws-cfn-bootstrap python34
                            /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
                            /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup
                            echo ECS_AVAILABLE_LOGGING_DRIVERS='["json-file","syslog","gelf","awslogs"]' >> /etc/ecs/ecs.config
                            curl -O https://bootstrap.pypa.io/get-pip.py
                            python3 /get-pip.py
                            /usr/local/bin/pip install awscli
                            (crontab -l 2>/dev/null; echo "*/5 * * * * /usr/local/bin/aws cloudwatch put-metric-data \
                            --metric-name LVMUsage \
                            --namespace DockerVolume \
                            --unit Percent --value \$(/sbin/lvs  --rows | grep Data | awk '{print \$2}') \
                            --dimensions InstanceId=$(curl  http://169.254.169.254/latest/meta-data/instance-id) \
                            --region ${AWS::Region}") | crontab -
                            /usr/local/bin/aws cloudwatch put-metric-alarm \
                            --alarm-name "Diskspace-$(curl  http://169.254.169.254/latest/meta-data/instance-id)" \
                            --alarm-description "The Diskspace utilization alarm for instance in ECS Cluster" \
                            --namespace "DockerVolume" \
                            --metric-name LVMUsage --statistic Average \
                            --period 60 --evaluation-periods 3 --threshold 50 \
                            --comparison-operator GreaterThanOrEqualToThreshold \
                            --dimensions Name=InstanceId,Value=$(curl  http://169.254.169.254/latest/meta-data/instance-id) --region ${AWS::Region}
        Metadata:
            AWS::CloudFormation::Init:
                config:
                    commands:
                        01_add_instance_to_cluster:
                            command: !Sub echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
                    files:
                        "/etc/cfn/cfn-hup.conf":
                            mode: 000400
                            owner: root
                            group: root
                            content: !Sub |
                                [main]
                                stack=${AWS::StackId}
                                region=${AWS::Region}

                        "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
                            content: !Sub |
                                [cfn-auto-reloader-hook]
                                triggers=post.update
                                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration

                    services:
                        sysvinit:
                            cfn-hup:
                                enabled: true
                                ensureRunning: true
                                files:
                                    - /etc/cfn/cfn-hup.conf
                                    - /etc/cfn/hooks.d/cfn-auto-reloader.conf

    # This IAM Role is attached to all of the ECS hosts. It is based on the default role
    # published here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
    #
    # You can add other IAM policy statements here to allow access from your ECS hosts
    # to other AWS services. Please note that this role will be used by ALL containers
    # running on the ECS host.

    ECSRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: !Sub ${EnvironmentName}-ECSRole-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "ec2.amazonaws.com"
                        }
                    }]
                }
            Policies:
                - PolicyName: ecs-service
                  PolicyDocument: |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "ecs:CreateCluster",
                                "ecs:DeregisterContainerInstance",
                                "ecs:DiscoverPollEndpoint",
                                "ecs:Poll",
                                "ecs:RegisterContainerInstance",
                                "ecs:StartTelemetrySession",
                                "ecs:Submit*",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:BatchGetImage",
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:GetAuthorizationToken",
                                "cloudwatch:*",
                                "efs:*"
                            ],
                            "Resource": "*"
                        }]
                    }

    ECSInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles:
                - !Ref ECSRole
    ECSScaleUpPolicy:
        Type: AWS::AutoScaling::ScalingPolicy
        Properties:
            AdjustmentType: ChangeInCapacity
            AutoScalingGroupName:
                Ref: ECSAutoScalingGroup
            Cooldown: '300'
            ScalingAdjustment: '1'
    ECSCPUScaleUpAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            EvaluationPeriods: '1'
            Statistic: Average
            Threshold: '80'
            AlarmDescription: Alarm if ECS Cluster CPU reservation goes above 80
            Period: '300'
            AlarmActions: [!Ref 'ECSScaleUpPolicy']
            Namespace: AWS/ECS
            Dimensions:
            -   Name: ClusterName
                Value:
                    Ref: ECSCluster
            ComparisonOperator: GreaterThanThreshold
            MetricName: CPUReservation
    ECSScaleDownPolicy:
        Type: AWS::AutoScaling::ScalingPolicy
        Properties:
            AdjustmentType: ChangeInCapacity
            AutoScalingGroupName:
                Ref: ECSAutoScalingGroup
            Cooldown: '300'
            ScalingAdjustment: '-1'
    ECSCPUScaleDownAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            EvaluationPeriods: '1'
            Statistic: Average
            Threshold: '20'
            AlarmDescription: Alarm if ECS Cluster CPU reservation goes below 20
            Period: '300'
            AlarmActions: [!Ref 'ECSScaleDownPolicy']
            Namespace: AWS/ECS
            Dimensions:
            -   Name: ClusterName
                Value:
                    Ref: ECSCluster
            ComparisonOperator: LessThanThreshold
            MetricName: CPUReservation
Outputs:

    Cluster:
        Description: A reference to the ECS cluster
        Value: !Ref ECSCluster
        Export:
            Name: !Sub ${EnvironmentName}-ECSCluster
