Description: >
    This template deploys an ECS cluster to the provided VPC and subnets

Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  CertificateArn:
    Description: Your Domain SSL/TLS CertificateArn for your Public Load Balancer
    Type: String


Resources:
  ECSCluster:
      Type: AWS::ECS::Cluster
      Properties:
          ClusterSettings:
            - Name: containerInsights
              Value: enabled
          ClusterName: !Ref EnvironmentName
          Tags:
            - Key: CloudFormation
              Value: true


  # This IAM Role is attached to all of the ECS hosts. It is based on the default role
  # published here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
  #
  # You can add other IAM policy statements here to allow access from your ECS hosts
  # to other AWS services. Please note that this role will be used by ALL containers
  # running on the ECS host.

  ECSRole:
      Type: AWS::IAM::Role
      Properties:
          Path: /
          RoleName: !Sub ${EnvironmentName}-ECSRole-${AWS::Region}
          AssumeRolePolicyDocument: |
              {
                  "Statement": [{
                      "Action": "sts:AssumeRole",
                      "Effect": "Allow",
                      "Principal": {
                          "Service": "ec2.amazonaws.com"
                      }
                  }]
              }
          Policies:
              - PolicyName: ecs-service
                PolicyDocument: |
                  {
                      "Statement": [{
                          "Effect": "Allow",
                          "Action": [
                              "ecs:CreateCluster",
                              "ecs:DeregisterContainerInstance",
                              "ecs:DiscoverPollEndpoint",
                              "ecs:Poll",
                              "ecs:RegisterContainerInstance",
                              "ecs:StartTelemetrySession",
                              "ecs:Submit*",
                              "logs:CreateLogStream",
                              "logs:PutLogEvents",
                              "ecr:BatchCheckLayerAvailability",
                              "ecr:BatchGetImage",
                              "ecr:GetDownloadUrlForLayer",
                              "ecr:GetAuthorizationToken",
                              "cloudwatch:*"
                          ],
                          "Resource": "*"
                      }]
                  }
          Tags:
            - Key: CloudFormation
              Value: true


  # This is a role used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'

                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'

                # Allow the ECS tasks to write traces to AWS X-Ray
                - 'xray:PutTraceSegments'
                - 'xray:PutTelemetryRecords'

                # If your scheduled tasks require the use of the task execution role, a task role,
                # or if they use a task role override, then you must add iam:PassRole permissions for your task
                # execution role, task role, or task role override to the CloudWatch IAM role.
                # For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/CWE_IAM_role.html
                - 'iam:PassRole'
              Resource: '*'
      Tags:
        - Key: CloudFormation
          Value: true

  # Load balancers for getting traffic to containers.
  #
  # - One public load balancer, hosted in public subnets that is accessible
  #   to the public, and is intended to route traffic to one or more public
  #   facing services.

  # A public facing load balancer, this is used for accepting traffic from the public
  # internet and directing it to public facing microservices
  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId:
        Fn::ImportValue: !Sub '${EnvironmentName}-VPC'
      SecurityGroupIngress:
          # Only allow access to ALB's 443 port from anywhere on the internet
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: 0.0.0.0/0
      Tags:
        - Key: CloudFormation
          Value: true

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${EnvironmentName}-PublicLoadBalancer'
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets:
        # The load balancer is placed into the public subnets, so that traffic
        # from the internet can reach the load balancer directly via the internet gateway
        - Fn::ImportValue: !Sub '${EnvironmentName}-PublicSubnet1'
        - Fn::ImportValue: !Sub '${EnvironmentName}-PublicSubnet2'
        #- !Ref PublicSubnetOne
        #- !Ref PublicSubnetTwo
      SecurityGroups: [!Ref 'PublicLoadBalancerSG']
      Tags:
        - Key: CloudFormation
          Value: true

  # A dummy target group is used to setup the ALB to just drop traffic
  # initially, before any real service target groups have been added.
  DummyTargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Sub '${EnvironmentName}-drop-1'
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub '${EnvironmentName}-VPC'
      Tags:
        - Key: CloudFormation
          Value: true

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref 'CertificateArn'
      DefaultActions:
        - TargetGroupArn: !Ref 'DummyTargetGroupPublic'
          Type: 'forward'
      LoadBalancerArn: !Ref 'PublicLoadBalancer'
      Port: 443
      Protocol: HTTPS
Outputs:
  ClusterName:
    Description: A reference to the ECS cluster
    Value: !Ref 'ECSCluster'
    Export:
      Name: !Sub '${EnvironmentName}-ECSCluster'
  ECSTaskExecutionRoleArn:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSTaskExecutionRole.Arn'
    Export:
      Name: !Sub '${EnvironmentName}-ECSTaskExecutionRoleArn'
  PublicListener:
    Description: The ARN of the public load balancer's Listener
    Value: !Ref 'PublicLoadBalancerListener'
    Export:
      Name: !Sub '${EnvironmentName}-PublicListener'
  PublicLoadBalancerHostedZoneID:
    Description: Canonical Hosted Zone ID of Public Load Balancer for Route53
    Value: !GetAtt PublicLoadBalancer.CanonicalHostedZoneID
    Export:
      Name: !Sub '${EnvironmentName}-PublicLoadBalancerHostedZoneID'
  PublicLoadBalancerDNSName:
    Description: DNS Name of Public Load Balancer for Route53
    Value: !GetAtt PublicLoadBalancer.DNSName
    Export:
      Name: !Sub '${EnvironmentName}-PublicLoadBalancerDNSName'
  PublicLoadBalancerFullName:
    Description: Public Load Balancer full name
    Value: !GetAtt PublicLoadBalancer.LoadBalancerFullName
    Export:
      Name: !Sub '${EnvironmentName}-PublicLoadBalancerFullName'
